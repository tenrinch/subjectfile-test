name: deployment artifact

on:
  push:
    branches:
      - master

jobs:

  create-deployment-artifact:
    name: Create Deployment Artifact
    runs-on: ubuntu-latest
    outputs:
     deployment-matrix: ${{steps.export-deployment-matrix.outputs.deployment-matrix}}

    steps:
      - uses: actions/checkout@v2

      - name: compile CSS and java script
        run: |
          npm install
          npm run prod

      - name: configure php7.4
        uses: shivammathur/setup-php@master
        with: 
          php-version: 7.4
          extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml

      - name: install composer dependencies
        run: composer install --no-dev --no-interaction --prefer-dist

      - name: create deployment artifact
        env: 
          GITHIB_SHA: ${{github.sha}}
        run: tar -cvJf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules *

      - name: store artifact for distribution
        uses: actions/upload-artifact@v2
        with:
          name: subjectfile-build
          path: ${{github.sha}}.tar.gz  

      - name: export deployment matrix
        id: export-deployment-matrix
        run: | 
          JSON="$(cat ./deployment-config.json)"
          JSON="${JSON//'%'/'%25'}"
          JSON="${JSON//$'\n'/'%0A'}"
          JSON="${JSON//$'\r'/'%0D'}"
          echo "::set-output name=deployment-matrix::$JSON"

  prepare-release-on-server:
    
    runs-on: ubuntu-latest
    needs: create-deployment-artifact
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifact.outputs.deployment-matrix) }}

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: subjectfile-build

      - name: upload
        uses: appleboy/scp-action@master
        with: 
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ matrix.server.path}}/artifacts

      - name: extract artifact and make directory
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{github.sha}}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "${{matrix.server.path}}/releases/${GITHUB_SHA}"
            tar -xvJf ${{ matrix.server.path}}/artifacts/${GITHUB_SHA}.tar.gz -C ${{matrix.server.path}}/releases/${GITHUB_SHA}
            chmod -R 755 ${{matrix.server.path}}/releases/${GITHUB_SHA}
            chown -R www-data:www-data ${{matrix.server.path}}/releases
            chown -R www-data:www-data ${{matrix.server.path}}/releases/${GITHUB_SHA}

            rm -rf ${{matrix.server.path}}/releases/${GITHUB_SHA}/storage
            mkdir -p ${{matrix.server.path}}/storage/{app,framework,logs,public}
            mkdir -p ${{matrix.server.path}}/storage/framework/{cache,sessions,testing,views}
            mkdir -p ${{matrix.server.path}}/storage/framework/cache/data
            chmod -R 0755 ${{matrix.server.path}}/storage
    
  run-before-hook:
    name: "${{matrix.server.name}}: before hook"
    runs-on: ubuntu-latest
    needs: [create-deployment-artifact,prepare-release-on-server]
    strategy:
      matrix: 
        server: ${{ fromJson(needs.create-deployment-artifact.outputs.deployment-matrix) }}

    steps:
      - name: run before hook
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{github.sha}}
          RELEASE_PATH: ${{matrix.server.path}}/releases/${{github.sha}}
          ACTIVE_REPLEASE_PATH: ${{matrix.server.path}}/current
          STORAGE_PATH: ${{matrix.server.path}}/storage
          BASE_PATH: ${{matrix.server.path}}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_REPLEASE_PATH,STORAGE_PATH,BASE_PATH
          script: |
            ${{matrix.server.beforehook}}

  activate-release:
    name: "${{matrix.server.name}} : activate release"
    runs-on: ubuntu-latest
    needs: [create-deployment-artifact,prepare-release-on-server,run-before-hook]
    strategy:
      matrix: 
        server: ${{ fromJson(needs.create-deployment-artifact.outputs.deployment-matrix) }}

    steps:
      - name: activate release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{github.sha}}
          RELEASE_PATH: ${{matrix.server.path}}/releases/${{github.sha}}
          ACTIVE_REPLEASE_PATH: ${{matrix.server.path}}/current
          STORAGE_PATH: ${{matrix.server.path}}/storage
          BASE_PATH: ${{matrix.server.path}}
          LARAVEL_ENV: ${{secrets.LARAVEL_ENV}}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_REPLEASE_PATH,STORAGE_PATH,BASE_PATH,LARAVEL_ENV
          script: |
            printf "%s" "${LARAVEL_ENV}" > "${BASE_PATH}/.env"  
            ln -s -f ${BASE_PATH}/.env  $RELEASE_PATH
            ln -s -f $STORAGE_PATH $RELEASE_PATH
            ln -s -f -n $RELEASE_PATH $ACTIVE_REPLEASE_PATH
            chown -R www-data:www-data $ACTIVE_REPLEASE_PATH
            systemctl reload php7.4-fpm

  run-after-hook:
    name: "${{matrix.server.name}}: after hook"
    runs-on: ubuntu-latest
    needs: [create-deployment-artifact,prepare-release-on-server,run-before-hook,activate-release]
    strategy:
      matrix: 
        server: ${{ fromJson(needs.create-deployment-artifact.outputs.deployment-matrix) }}

    steps:
      - name: run before hook
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{github.sha}}
          RELEASE_PATH: ${{matrix.server.path}}/releases/${{github.sha}}
          ACTIVE_REPLEASE_PATH: ${{matrix.server.path}}/current
          STORAGE_PATH: ${{matrix.server.path}}/storage
          BASE_PATH: ${{matrix.server.path}}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_REPLEASE_PATH,STORAGE_PATH,BASE_PATH
          script: |
            ${{matrix.server.afterhook}}

  clean-up:
    name: "${{matrix.server.name}}: clean up"
    runs-on: ubuntu-latest
    needs: [create-deployment-artifact,prepare-release-on-server,run-before-hook,activate-release,run-after-hook]
    strategy:
      matrix: 
        server: ${{ fromJson(needs.create-deployment-artifact.outputs.deployment-matrix) }}

    steps:
      - name: run clean up
        uses: appleboy/ssh-action@master
        env:          
          RELEASE_PATH: ${{matrix.server.path}}/releases
          ARTIFACTS_PATH: ${{ matrix.server.path}}/artifacts          
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          envs: RELEASE_PATH,ARTIFACTS_PATH
          script: |
            cd $RELEASE_PATH && ls -t -1 | tail -n +6 | xargs rm -rf 
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +6 | xargs rm -rf


            
            








        